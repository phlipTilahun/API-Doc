openapi: 3.0.1
info:
  title: TickET API
  version: 1.0.0
  description: |
    Integrate TickET API with your service.
    The TickET API is intended for
    several types of business third-party
    integrations. It includes support for
    all types of online ticketing services.  To use the API you must first register [here](https://www.registrationsite.com) and an API key will be given to you. The API key should be used to access the API and make requests. The key should be passed in every request's URL parameter as ?key=APIKEY.
    
    Note: Using the standard print option in
    most browsers, you can save this
    documentation as a pdf file.
    
    # **General**
    - **/events**  - this endpoint can be used to get a list of events, create and modify events, and check status of events..
    - **/venues** - use the provided endpoints for creating, modifying and viewing venues.
    - **/halls** - for viewing, creating and modifying halls.
    - **/charts** - for creating and modifying and viewing charts.
    - **/eventreport** - to get an event report
    - **/ticket** - to create tickets
    
    # **Integration**
    
    Integration of this API can be done in several ways. An IT professional with some serverside backend and OpenAPI specification knowledge can use this document to integrate TickET API with any system requiring ticketing  services or potential customers can contact us at [ticketapi@gmail.com](https://www.ticketapi@gmail.com) and our API team will do the integration.
    
    # **States**
    
    Events can have several states and can change from one to another depending on specific occurrances.
    - SCHEDULED - the event is created but it's not due yet.
    - STOPPED - the event was created and IN-PROGRESS but it has been halted for some reason. 
    - ON-HOLD - the event was created and scheduled but ticket sales has not started yet.
    - IN-PROGRESS - the event has already started but it's not completed yet, but can changed to STOPPED.
    - COMPLETED - the event has been completed.
    - CANCELLED - the event was created and SCHEDULED but has been canceled for some reason.
    
    Ticket sales also have several states  
     - SCHEDULED - the event has been created and SCHEDULED but ticket sales has not started yet.
     - OPEN - the event has been created and SCHEDULED and ticket sales has been started.
     - CLOSED - the event's ticket sale had been OPEN but has now ended.
     
     Some of these states are temporary and some are final states. STOPPED, COMPLETED, CANCELED and CLOSED are permanent event states. SCHEDULED, ON-HOLD, IN-PROGRESS, OPEN are temporary states and can change.
    

    
servers:
  - url: 'https://tickapi1.herokuapp.com'
paths: 
  /event:
    get:
      tags:
        - events
      summary: "Get a list of events"
      description: ""
      parameters: 
          - $ref: '#/components/parameters/limit' 
          - $ref: '#/components/parameters/page'
          - $ref: '#/components/parameters/evst'
          - $ref: '#/components/parameters/tkst'
          - $ref: '#/components/parameters/ven'
          - $ref: '#/components/parameters/ha'  
          - $ref: '#/components/parameters/name'
          - $ref: '#/components/parameters/desc'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
                                  "limit": "8",
                                  "evst": "i",
                                  "page": "8"
                                 }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"limit\" must be a number",
            "path": [
                "limit"
            ],
            "type": "number.base",
            "context": {
                "label": "limit",
                "value": "u",
                "key": "limit"
            }
        }
    ]
    post:
      tags:
        - events
      summary: "Create an event"  
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/event'
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "eventId": 45345,
        "eventName": "Birabiro",
        "eventDescription": "A diplo concert",
        "startDate": "Jan-08-2020",
        "endDate": "Jan-08-2020",
        "startTime": "08:30:00",
        "endTime": "92:00:00",
        "eventStatus": "SCHEDULED",
        "tickStat": "OPEN",
        "hallId": 34,
        "venueId": 56
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "endTime should be in 24 hour 'HH:MM:SS' format, and separated by colon",
            "path": [
                "endTime"
            ],
            "type": "string.pattern.base",
            "context": {
                "regex": {},
                "value": "92:00:00",
                "label": "endTime",
                "key": "endTime"
            }
        }
    ]
    put: 
      tags:
        - events
      summary: "Modify an event if it already exists or create it if it doesn't exist"
      requestBody:
        description: ""
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/event'
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "eventId": 45345,
        "eventName": "Birabiro",
        "eventDescription": "A diplo concert",
        "startDate": "Jan-08-2020",
        "endDate": "Jan-08-2020",
        "startTime": "08:30:00",
        "endTime": "92:00:00",
        "eventStatus": "SCHEDULED",
        "tickStat": "OPEN",
        "hallId": 34,
        "venueId": 56
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "endTime should be in 24 hour 'HH:MM:SS' format",
            "path": [
                "endTime"
            ],
            "type": "string.pattern.base",
            "context": {
                "regex": {},
                "value": "92:00:00",
                "label": "endTime",
                "key": "endTime"
            }
        }
    ] 
  /event/{id}:
    get:
      tags: 
        - events
      summary: "Get a specific event by id"
      parameters: 
        - name: id
          in: path
          description: "Id of an event"
          schema:
            type: integer
            default: 45
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "Not found"
    delete:
      tags: 
        - events
      summary: "Delete an event by id"
      parameters: 
        - name: id
          in: path
          description: "Id of an event"
          schema:
            type: integer
            default: 45
          required: true
      responses:
        200:
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: "Event deleted"
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "Not found"
  /venue:
    get:
      tags:
        - venues
      summary: "Return a list of venues"
      description: ""
      parameters:
        - $ref: '#/components/parameters/limit' 
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
      responses:  
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  venueId:
                    type: integer
                    example: "34"
                  name:
                    type: string
                    example: "Gast Cinema"
                  location:
                    type: string
                    example: "CMC , Addis Ababa Addis Ababa, 1000"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "limit": "k"
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"limit\" must be a number",
            "path": [
                "limit"
            ],
            "type": "number.base",
            "context": {
                "label": "limit",
                "value": "k",
                "key": "limit"
            }
        }
    ]
    post:
      tags: 
        - venues
      summary: "Create a venue"
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              type: object
              properties:
                  venueId:
                    type: integer
                    example: "34"         
                  name: 
                    type: string
                    example: "Lafto Mall"
                  location:
                    type: string
                    example: "Old Airport, Next to Bisrate Gebriel Church, S Africa St, Addis Ababa"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/venue'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "venueId": "ii",
        "name": "Gast Cinema",
        "location": "CMC , Addis Ababa Addis Ababa, 1000"
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"venueId\" must be a number",
            "path": [
                "venueId"
            ],
            "type": "number.base",
            "context": {
                "label": "venueId",
                "value": "ii",
                "key": "venueId"
            }
        }
    ]      
    put:
      tags: 
        - venues
      summary: "Modify a venue if it already exists or create it if it doesn't exist"
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              type: object
              properties:
                venueId:
                  type: integer
                  example: "34"              
                name: 
                  type: string
                  example: "Lafto Mall and Recreation Center"
                location:
                  type: string
                  example: "Old Airport, Next to Bisrate Gebriel Church, S Africa St, Addis Ababa"         
      responses:
        201:
          description: "created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/venue' 
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "venueId": "ii",
        "name": "Gast Cinema",
        "location": "CMC , Addis Ababa Addis Ababa, 1000"
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"venueId\" must be a number",
            "path": [
                "venueId"
            ],
            "type": "number.base",
            "context": {
                "label": "venueId",
                "value": "ii",
                "key": "venueId"
            }
        }
    ]         
  /venue/{id}:
    get:
      tags: 
        - venues
      summary: "Get a specific venue by id"
      description: ""
      parameters: 
        - name: id
          in: path
          description: "Id of a venue"
          schema:
            type: integer
          required: true
      responses:
        200: 
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/venue'
        404:
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
                example: "Not found"
    delete:
      tags: 
        - venues
      summary: "Delete a venue by id"
      description: ""
      parameters: 
        - name: id
          in: path
          description: "Id of a venue"
          schema:
            type: integer
          required: true 
      responses:
        200:
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: "Venue deleted"
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "Venue not found"
  /hall:
    get:
      tags: 
        - halls
      summary: "Returns a list of halls"
      description: ""
      parameters: 
        - $ref: '#/components/parameters/limit' 
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/ven'
        - $ref: '#/components/parameters/desc'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hall'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "j": "9"
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"j\" is not allowed",
            "path": [
                "j"
            ],
            "type": "object.unknown",
            "context": {
                "child": "j",
                "label": "j",
                "value": "9",
                "key": "j"
            }
        }
    ]
    post:
      tags: 
        - halls
      summary: "Creates a hall"
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hall'
      responses:
        201:
          description: "Created"
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/hall'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "hallId": 78,
        "venueId": 34,
        "venName": "Alem Cinema",
        "name": "Hall Biniyam Getachew Esayas",
        "capacity": 200
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"name\" length must be less than or equal to 20 characters long",
            "path": [
                "name"
            ],
            "type": "string.max",
            "context": {
                "limit": 20,
                "value": "Hall Biniyam Getachew Esayas",
                "label": "name",
                "key": "name"
            }
        }
    ]
    put:
      tags:
        - halls
      summary: "Modify a hall if it exists or create it if it doesn't exist"
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hall'
      responses:
        201:
          description: ""
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/hall'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "hallId": 78,
        "venueId": 34,
        "venName": "Alem Cinema",
        "name": "Hall Biniyam Getachew Esayas",
        "capacity": 200
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "\"name\" length must be less than or equal to 20 characters long",
            "path": [
                "name"
            ],
            "type": "string.max",
            "context": {
                "limit": 20,
                "value": "Hall Biniyam Getachew Esayas",
                "label": "name",
                "key": "name"
            }
        }
    ]  
  /hall{id}:
    get:
      tags:
        - halls
      summary: "Fetch an existing hall by id"
      description: ""
      parameters: 
        - name: id
          in: path
          description: "Id of a hall"
          schema:
            type: integer
          required: true
      responses:
        200: 
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hall'
        404:
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
                example: "Hall Not found"
    delete:
      tags: 
        - halls
      summary: "Delete an existing hall by id"
      description: ""
      parameters: 
        - name: id
          in: path
          description: "Id of a venue"
          schema:
            type: integer
          required: true 
      responses:
        201:
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: "Hall deleted" 
        404:
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
                example: "Hall Not found"        
  /chart:
    get:
      tags: 
        - charts
      summary: "Fetches a list of charts"
      description: ""
      parameters: 
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/ha'
        - $ref: '#/components/parameters/desc'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chart'
        400:   
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message: 
                        type: string
                        enum: ["Parameter data type missmatch"]
                        example: "Parameter data type missmatch"
                      details:
                        type: string
                        enum: ["Page parameter should be integer","limit should be integer","desc should be one of 'true' or 'false'","ha should be integer"]
                        example: "Page parameter should be integer"
    post:
      tags:
        - charts
      summary: "Creates a single chart" 
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: "Created"
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/chart'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum: ["Missing property"]
                        example: "Missing  property"
                      details:
                        type: string
                        enum: ["Missing numofSeat Property"]
                        example: "Missing numofSeat Property" 
    put:
      tags:
        - charts
      summary: "Modify a chart if it already exists or create one if it doesn't"
      description: ""
      responses:
        201:
          description: "Created"
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/chart'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum: ["Missing  property"]
                        example: "Missing  property"
                      details:
                        type: string
                        enum: ["Missing numofSeat Property"]
                        example: "Missing numofSeat Property"
  /chart{id}:
    get:
      tags: 
        - charts
      summary: "Get a chart by id"
      description: ""
      parameters:
        - name: id
          in: path
          description: "Id of a chart"
          schema:
            type: integer
          required: true 
      responses:
        200: 
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chart'
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "Not found"
    delete:
      tags: 
        - charts
      summary: "Delete a chart by id"
      description: ""
      parameters: 
        - name: id
          in: path
          description: "Id of a chart"
          schema:
            type: integer
          required: true 
      responses:
        200:
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: "Chart deleted"
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "Not found"     
  /eventReport:
    get:
      tags:
        - eventreports
      summary: "Get an eventReport by event id"
      description: ""
      parameters:
          - $ref: '#/components/parameters/ev'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventreport'
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "Not found"  
                        
  /ticket:
    get:
      tags:
        - ticket
      summary: "Fetches a list of tickets"
      description: "Use this endpoint to get tickets to a specific event. The endpoint has only one parameter, ev(The id of the event)."
      parameters:
        - $ref: '#/components/parameters/ev'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  eventId:
                    type: integer
                    example: "56"
                  eventName:
                    type: string
                    example: "Trip from Addis Ababa to Bahir Dar"
                  date:
                    type: string
                    example: "Dec-12-21"
                  time:
                    type: string
                    example: "12:30:00"
                  hallName:
                    type: string
                    example: "HallB"
                  seatNum:
                    type: string
                    example: ""
        404:
          description: "Not found"
          content:
            text/plain:
              schema:
                type: string
                example: "There are no tickets with the provided eventid"
    post:
      tags:
        - ticket
      summary: "Creates a ticket"
      description: "When a customer of yours purchases a ticket and your system confirms money has been recieved, your system should use this endpoint to create a ticket.This endpoint will return a QR Code in the form of a JPEG image."
      requestBody:
        content:
          application/json:
            schema:
              properties:
                eventId:
                  type: integer
                  example: "56"
                eventName:
                  type: string
                  example: "Trip from Addis Ababa to Bahir Dar"
                date:
                  type: string
                  example: "Dec-12-21"
                time:
                  type: string
                  example: "12:30:00"
                hallName:
                  type: string
                  example: "HallB"
                venueName:
                  type: string
                  example: "VenueA"
                seatNum:
                  type: string
                  example: ""
      responses:
        200:
          description: "OK"
          content:
            image/jpeg:
              schema:
                title: ticket
                type: string
                format: binary
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                title: "error"
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      _original:
                        type: object
                        example: {
        "eventId": "56",
        "eventName": "Trip from Addis Ababa to Bahir Dar",
        "date": "Dec-12-21",
        "time": "12-30-00",
        "hallName": "HallB"
    }
                      details: 
                        type: object
                        example: [
        {
            "message": "time should be in 24 hour 'HH:MM:SS' format, and separated by colon",
            "path": [
                "time"
            ],
            "type": "string.pattern.base",
            "context": {
                "regex": {},
                "value": "12-30-00",
                "label": "time",
                "key": "time"
            }
        }
    ]
    
security:
  - api_key: []    
  
    
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "key"
      in: "query" 
  parameters:
     limit:
       name: limit
       in: query
       description: "Number of items to be returned"
       schema:
          type: integer
          default: 10 
     page:      
       name: page
       in: query
       description: "When incremented specifies the next set of items (whose amount described by limit) to return."
       schema:
          type: integer
          default: 1
     evst:      
       name: evst
       in: query
       description: "Filter result by event status codes."
       schema:
         type: array
         items: 
            type: string
            enum: ["SCHEDULED","STOPPED","ON-HOLD","IN-PROGRESS","COMPLETED","CANCELLED"]    
     tkst:    
       name: tkst
       in: query
       description: "Filter result by comma separated ticket sales status codes."
       schema:
         type: array
         items:
           type: string
           enum: ["SCHEDULED","OPEN","CLOSED"]
     ven:
       name: ven
       in: query
       description: "Filters result by venue Id"
       schema:
          type: integer
     ha:     
       name: ha
       in: query
       description: "Filters result by hall Id"
       schema: 
          type: integer
     name:
       name: name
       in: query
       description: "Filters results by name"
       schema:
         type: string
     ev:
       name: ev
       in: query
       description: "Filter result by event Id"
       schema:
         type: integer
     desc:
       name: desc
       in: query
       description: "Order results by ascending or descending by date of creation"
       schema:
         type: boolean
         default: true
     tags:
       name: tags
       in: query
       description: "Filter results by search tags"
       schema:
         type: array
         items:
           type: string
           example: ""
  schemas:
    event:
      title: event
      type: object
      properties:
        eventId:
         type: integer
         example: 45345
        eventName:
         type: string
         example: "Birabiro"
        eventDescription:
         type: string
         example: "A diplo concert"
        startDate:
         type: string
         example: "Jan-08-2020"
        endDate: 
         type: string
         example: "Jan-08-2020"
        startTime:
         type: string
         example: "08:30:00"
        endTime:
         type: string
         example: "12:00:00"
        eventStatus:
         type: string
         enum: ["SCHEDULED","STOPPED","ON-HOLD","IN-PROGRESS","COMPLETED","CANCELLED"]
         example: "SCHEDULED"
        tickStat: 
         type: string
         enum: ["SCHEDULED","OPEN","CLOSED"]
         example: "OPEN"
        hallId:
         type: integer
         example: 34
        venueId:
         type: integer
         example: 56
    venue:
      title: "venue"
      type: object
      properties:
        venueId: 
          type: integer
          example: 52
        name: 
          type: string
          example: "Alem cinema"
        location: 
          type: string
          example: "Airport Road, Addis Ababa"
    hall:
      title: "hall"
      type: object
      properties:
        hallId:
          type: integer
          example: 78
        venueId:
          type: integer
          example: 34
        venName:
          type: string
          example: "Alem Cinema"
        name:
          type: string
          example: "HallA"
        capacity:
          type: integer
          example: 200
    chart:
      title: chart
      type: string
      format: binary
    eventreport:
      title: eventchart
      type: object
      properties:
        eventName:
          type: string
          example: "Despicable Me 2"
        numofSoldNormalTick:
          type: integer
          example: 148
        numofSoldVIPTick:
          type: integer
          example: 60
        numofSoldEconomyTick:
          type: integer
          example: 150
        moneyMade:
          type: integer
          example: 5600
      


          

                    
                  
